{"ast":null,"code":"var _jsxFileName = \"/Users/maximpiessen/Documents/credix/generate-keypair/src/components/Navbar/CheckBalance/index.js\",\n    _s = $RefreshSig$();\n\nimport { Button } from '@material-ui/core';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport React, { FC, useEffect } from 'react';\nimport { GetProvider } from '../../Utils/utils';\nimport { dummyMintPk } from '../../../config/config.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckBalance = _ref => {\n  _s();\n\n  let {\n    network,\n    reload,\n    balance,\n    setBalance,\n    solBalance,\n    setSolBalance\n  } = _ref;\n  const wallet = useWallet();\n  const [provider, connection] = GetProvider(wallet, network);\n  const publicKey = provider.wallet.publicKey;\n  const networkMap = {\n    'https://api.devnet.solana.com': 'DEVNET',\n    'https://api.testnet.solana.com': 'TESTNET',\n    'http://127.0.0.1:8899': 'LOCALNET'\n  };\n  useEffect(() => {\n    checkBalance();\n  }, [reload, wallet]);\n\n  async function checkBalance() {\n    try {\n      const parsedTokenAccountsByOwner = await connection.getParsedTokenAccountsByOwner(provider.wallet.publicKey, {\n        mint: dummyMintPk\n      });\n      balance = 1.0 * parsedTokenAccountsByOwner.value[0].account.data.parsed.info.tokenAmount.uiAmount;\n    } catch (err) {\n      console.log(err);\n      balance = 0;\n    }\n\n    try {\n      solBalance = await connection.getBalance(provider.wallet.publicKey);\n    } catch (err) {\n      console.log(err);\n      solBalance = 0;\n    }\n\n    setBalance(Math.round(balance * 100) / 100);\n    setSolBalance(Math.round(solBalance / 1000000000 * 100 / 100));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    className: \"MuiButton-containedPrimary balance-button credix-button\",\n    onClick: checkBalance,\n    disabled: !publicKey,\n    children: [\"Check balance [\", networkMap[network], \"]\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CheckBalance, \"Op0/wBxK9c7Ln+hGs0edgZQ9zC0=\", false, function () {\n  return [useWallet];\n});\n\n_c = CheckBalance;\nexport default CheckBalance;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckBalance\");","map":{"version":3,"sources":["/Users/maximpiessen/Documents/credix/generate-keypair/src/components/Navbar/CheckBalance/index.js"],"names":["Button","useWallet","React","FC","useEffect","GetProvider","dummyMintPk","CheckBalance","network","reload","balance","setBalance","solBalance","setSolBalance","wallet","provider","connection","publicKey","networkMap","checkBalance","parsedTokenAccountsByOwner","getParsedTokenAccountsByOwner","mint","value","account","data","parsed","info","tokenAmount","uiAmount","err","console","log","getBalance","Math","round"],"mappings":";;;AAAA,SAAQA,MAAR,QAAqB,mBAArB;AACA,SAAQC,SAAR,QAAwB,8BAAxB;AACA,OAAOC,KAAP,IAAeC,EAAf,EAAmBC,SAAnB,QAAmC,OAAnC;AACA,SAAQC,WAAR,QAA0B,mBAA1B;AACA,SAAQC,WAAR,QAA0B,2BAA1B;;;AAEA,MAAMC,YAAgB,GAAG,QAAuE;AAAA;;AAAA,MAAtE;AAACC,IAAAA,OAAD;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA,UAA3B;AAAuCC,IAAAA,UAAvC;AAAmDC,IAAAA;AAAnD,GAAsE;AAC5F,QAAMC,MAAM,GAAGb,SAAS,EAAxB;AACA,QAAM,CAACc,QAAD,EAAWC,UAAX,IAAyBX,WAAW,CAACS,MAAD,EAASN,OAAT,CAA1C;AACA,QAAMS,SAAS,GAAGF,QAAQ,CAACD,MAAT,CAAgBG,SAAlC;AACA,QAAMC,UAAU,GAAG;AACjB,qCAAiC,QADhB;AAEjB,sCAAkC,SAFjB;AAGjB,6BAAyB;AAHR,GAAnB;AAMFd,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACV,MAAD,EAASK,MAAT,CAFM,CAAT;;AAIE,iBAAeK,YAAf,GAA8B;AAC5B,QAAI;AACF,YAAMC,0BAA0B,GAAG,MAAMJ,UAAU,CAACK,6BAAX,CAAyCN,QAAQ,CAACD,MAAT,CAAgBG,SAAzD,EAAoE;AAAEK,QAAAA,IAAI,EAAEhB;AAAR,OAApE,CAAzC;AACAI,MAAAA,OAAO,GAAG,MAAMU,0BAA0B,CAACG,KAA3B,CAAiC,CAAjC,EAAoCC,OAApC,CAA4CC,IAA5C,CAAiDC,MAAjD,CAAwDC,IAAxD,CAA6DC,WAA7D,CAAyEC,QAAzF;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACApB,MAAAA,OAAO,GAAG,CAAV;AACD;;AACD,QAAI;AACFE,MAAAA,UAAU,GAAG,MAAMI,UAAU,CAACiB,UAAX,CAAsBlB,QAAQ,CAACD,MAAT,CAAgBG,SAAtC,CAAnB;AACD,KAFD,CAEE,OAAOa,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAlB,MAAAA,UAAU,GAAG,CAAb;AACD;;AACDD,IAAAA,UAAU,CAACuB,IAAI,CAACC,KAAL,CAAWzB,OAAO,GAAG,GAArB,IAA0B,GAA3B,CAAV;AACAG,IAAAA,aAAa,CAACqB,IAAI,CAACC,KAAL,CAAavB,UAAU,GAAG,UAAd,GAA4B,GAA7B,GAAkC,GAA7C,CAAD,CAAb;AACD;;AAED,sBACI,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,SAAS,EAAC,yDAAtC;AAAgG,IAAA,OAAO,EAAEO,YAAzG;AAAuH,IAAA,QAAQ,EAAE,CAACF,SAAlI;AAAA,kCACoBC,UAAU,CAACV,OAAD,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CArCD;;GAAMD,Y;UACaN,S;;;KADbM,Y;AAuCN,eAAeA,YAAf","sourcesContent":["import {Button} from '@material-ui/core';\nimport {useWallet} from '@solana/wallet-adapter-react';\nimport React, {FC, useEffect} from 'react';\nimport {GetProvider} from '../../Utils/utils';\nimport {dummyMintPk} from '../../../config/config.js';\n\nconst CheckBalance: FC = ({network, reload, balance, setBalance, solBalance, setSolBalance}) => {\n    const wallet = useWallet();\n    const [provider, connection] = GetProvider(wallet, network);\n    const publicKey = provider.wallet.publicKey;\n    const networkMap = {\n      'https://api.devnet.solana.com': 'DEVNET',\n      'https://api.testnet.solana.com': 'TESTNET',\n      'http://127.0.0.1:8899': 'LOCALNET'\n    }\n\n  useEffect(() => {\n    checkBalance();\n  }, [reload, wallet]);\n\n    async function checkBalance() {\n      try {\n        const parsedTokenAccountsByOwner = await connection.getParsedTokenAccountsByOwner(provider.wallet.publicKey, { mint: dummyMintPk });\n        balance = 1.0 * parsedTokenAccountsByOwner.value[0].account.data.parsed.info.tokenAmount.uiAmount;\n      } catch (err) {\n        console.log(err);\n        balance = 0;\n      }\n      try {\n        solBalance = await connection.getBalance(provider.wallet.publicKey);\n      } catch (err) {\n        console.log(err);\n        solBalance = 0;\n      }\n      setBalance(Math.round(balance * 100)/100);\n      setSolBalance(Math.round(((solBalance / 1000000000) * 100)/100));\n    }\n\n    return (\n        <Button variant=\"contained\" className=\"MuiButton-containedPrimary balance-button credix-button\" onClick={checkBalance} disabled={!publicKey} >\n            Check balance [{networkMap[network]}]\n        </Button>\n    );\n};\n\nexport default CheckBalance;\n"]},"metadata":{},"sourceType":"module"}