{"ast":null,"code":"var _jsxFileName = \"/Users/maximpiessen/Documents/credix/generate-keypair/src/components/KeyGenerator/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { FC, useState, useEffect } from 'react';\nimport * as web3 from '@solana/web3.js';\nimport \"./style.scss\";\nimport { generateKey } from 'crypto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst KeyGenerator = () => {\n  _s();\n\n  const [goalWord, setGoalWord] = useState(\"ab\");\n  const [publicKey, setPublicKey] = useState(\"calculating...\");\n  const [privateKey, setPrivateKey] = useState(\"calculating...\");\n\n  const handleChange = e => {\n    setGoalWord(e.value);\n  };\n\n  const handleSubmit = () => {\n    getKeys();\n  };\n\n  function makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n\n  const getKeys = () => {\n    var keyString = makeid(goalWord.length);\n    var key = web3.Keypair.generate();\n\n    while (keyString.slice(0, goalWord.length).toLowerCase() != goalWord) {\n      key = web3.Keypair.generate();\n      keyString = key.publicKey.toString();\n    }\n\n    console.log(key);\n    console.log(keyString);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"airdrop-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"airdrop-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Goal word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter the word with which your public key should start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"goalWord\",\n        type: \"text\",\n        value: goalWord,\n        onChange: handleChange,\n        className: \"airdrop-pk-input stake-input borrower-pk credix-button MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary balance-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: \"stake-submit MuiButton-containedPrimary balance-button credix-button sol-airdrop\",\n        onClick: handleSubmit,\n        children: \"GET KEY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(KeyGenerator, \"bbAjxn90qY0YHhEP5st5TVcyUA4=\");\n\n_c = KeyGenerator;\nexport default KeyGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"KeyGenerator\");","map":{"version":3,"sources":["/Users/maximpiessen/Documents/credix/generate-keypair/src/components/KeyGenerator/index.js"],"names":["React","FC","useState","useEffect","web3","generateKey","KeyGenerator","goalWord","setGoalWord","publicKey","setPublicKey","privateKey","setPrivateKey","handleChange","e","value","handleSubmit","getKeys","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","keyString","key","Keypair","generate","slice","toLowerCase","toString","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,EAAf,EAAmBC,QAAnB,EAA6BC,SAA7B,QAA6C,OAA7C;AACA,OAAO,KAAKC,IAAZ,MAAsB,iBAAtB;AAEA,OAAO,cAAP;AACA,SAASC,WAAT,QAA4B,QAA5B;;;AAEA,MAAMC,YAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,gBAAD,CAA1C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,gBAAD,CAA5C;;AAEA,QAAMW,YAAY,GAAIC,CAAD,IAAO;AAC1BN,IAAAA,WAAW,CAACM,CAAC,CAACC,KAAH,CAAX;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACzBC,IAAAA,OAAO;AACR,GAFD;;AAIA,WAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACtB,QAAIC,MAAM,GAAa,EAAvB;AACA,QAAIC,UAAU,GAAS,gEAAvB;AACA,QAAIC,gBAAgB,GAAGD,UAAU,CAACF,MAAlC;;AACA,SAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,MAArB,EAA6BI,CAAC,EAA9B,EAAmC;AACjCH,MAAAA,MAAM,IAAIC,UAAU,CAACG,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KACvCL,gBAD4B,CAAlB,CAAV;AAED;;AACD,WAAOF,MAAP;AACD;;AAED,QAAMH,OAAO,GAAG,MAAM;AACpB,QAAIW,SAAS,GAAGV,MAAM,CAACX,QAAQ,CAACY,MAAV,CAAtB;AACA,QAAIU,GAAG,GAAIzB,IAAI,CAAC0B,OAAL,CAAaC,QAAb,EAAX;;AAEA,WAAOH,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmBzB,QAAQ,CAACY,MAA5B,EAAoCc,WAApC,MAAqD1B,QAA5D,EAAsE;AACpEsB,MAAAA,GAAG,GAAIzB,IAAI,CAAC0B,OAAL,CAAaC,QAAb,EAAP;AACAH,MAAAA,SAAS,GAAGC,GAAG,CAACpB,SAAJ,CAAcyB,QAAd,EAAZ;AACD;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACD,GAXD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,KAAK,EAAErB,QAHT;AAIE,QAAA,QAAQ,EAAEM,YAJZ;AAKE,QAAA,SAAS,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA,cAHF,eAUE,QAAC,MAAD;AACI,QAAA,OAAO,EAAC,WADZ;AAEI,QAAA,SAAS,EAAC,kFAFd;AAGI,QAAA,OAAO,EAAEG,YAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA3DD;;GAAMV,Y;;KAAAA,Y;AA6DN,eAAeA,YAAf","sourcesContent":["import React, {FC, useState, useEffect} from 'react';\nimport * as web3 from '@solana/web3.js'; \n\nimport \"./style.scss\";\nimport { generateKey } from 'crypto';\n\nconst KeyGenerator: FC = () => {\n  const [goalWord, setGoalWord] = useState(\"ab\");\n  const [publicKey, setPublicKey] = useState(\"calculating...\");\n  const [privateKey, setPrivateKey] = useState(\"calculating...\");\n\n  const handleChange = (e) => {\n    setGoalWord(e.value); \n  };\n\n  const handleSubmit = () => {\n    getKeys(); \n  };\n\n  function makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * \n      charactersLength));\n    }\n    return result;\n  }\n  \n  const getKeys = () => {\n    var keyString = makeid(goalWord.length)\n    var key =  web3.Keypair.generate();\n\n    while (keyString.slice(0, goalWord.length).toLowerCase() != goalWord) {\n      key =  web3.Keypair.generate();\n      keyString = key.publicKey.toString();\n    }\n\n    console.log(key); \n    console.log(keyString);\n  }\n\n  return (\n    <div className=\"airdrop-container\">\n      <div className=\"airdrop-wrapper\">\n        <h3>Goal word</h3>\n        <p>Enter the word with which your public key should start</p>\n        <input\n          name=\"goalWord\"\n          type=\"text\"\n          value={goalWord}\n          onChange={handleChange}\n          className=\"airdrop-pk-input stake-input borrower-pk credix-button MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary balance-button\"\n        />\n        <Button\n            variant=\"contained\"\n            className=\"stake-submit MuiButton-containedPrimary balance-button credix-button sol-airdrop\"\n            onClick={handleSubmit}\n        >\n         GET KEY\n        </Button>\n       </div>\n    </div>\n  );\n};\n\nexport default KeyGenerator;\n"]},"metadata":{},"sourceType":"module"}